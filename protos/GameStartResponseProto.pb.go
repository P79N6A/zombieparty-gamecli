// Code generated by protoc-gen-go. DO NOT EDIT.
// source: GameStartResponseProto.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GameStartResponse struct {
	FrameTime  int32 `protobuf:"varint,1,opt,name=frameTime" json:"frameTime,omitempty"`
	FrameCount int32 `protobuf:"varint,2,opt,name=frameCount" json:"frameCount,omitempty"`
	GameTime   int64 `protobuf:"varint,3,opt,name=gameTime" json:"gameTime,omitempty"`
	StartTime  int64 `protobuf:"varint,4,opt,name=startTime" json:"startTime,omitempty"`
	MaxFrame   int64 `protobuf:"varint,5,opt,name=maxFrame" json:"maxFrame,omitempty"`
	Seed       int32 `protobuf:"varint,6,opt,name=seed" json:"seed,omitempty"`
	// 道具刷新间隔(秒)
	PropInterval int32 `protobuf:"varint,7,opt,name=propInterval" json:"propInterval,omitempty"`
	// 道具刷新比例, id percent
	PropPercent map[int32]int32 `protobuf:"bytes,8,rep,name=propPercent" json:"propPercent,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// 玩家信息, momoid info
	Players map[string]*PlayerInfo `protobuf:"bytes,9,rep,name=players" json:"players,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GameStartResponse) Reset()                    { *m = GameStartResponse{} }
func (m *GameStartResponse) String() string            { return proto.CompactTextString(m) }
func (*GameStartResponse) ProtoMessage()               {}
func (*GameStartResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *GameStartResponse) GetFrameTime() int32 {
	if m != nil {
		return m.FrameTime
	}
	return 0
}

func (m *GameStartResponse) GetFrameCount() int32 {
	if m != nil {
		return m.FrameCount
	}
	return 0
}

func (m *GameStartResponse) GetGameTime() int64 {
	if m != nil {
		return m.GameTime
	}
	return 0
}

func (m *GameStartResponse) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GameStartResponse) GetMaxFrame() int64 {
	if m != nil {
		return m.MaxFrame
	}
	return 0
}

func (m *GameStartResponse) GetSeed() int32 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *GameStartResponse) GetPropInterval() int32 {
	if m != nil {
		return m.PropInterval
	}
	return 0
}

func (m *GameStartResponse) GetPropPercent() map[int32]int32 {
	if m != nil {
		return m.PropPercent
	}
	return nil
}

func (m *GameStartResponse) GetPlayers() map[string]*PlayerInfo {
	if m != nil {
		return m.Players
	}
	return nil
}

type PlayerInfo struct {
	Prof int32   `protobuf:"varint,1,opt,name=prof" json:"prof,omitempty"`
	X    float32 `protobuf:"fixed32,2,opt,name=x" json:"x,omitempty"`
	Y    float32 `protobuf:"fixed32,3,opt,name=y" json:"y,omitempty"`
	Z    float32 `protobuf:"fixed32,4,opt,name=z" json:"z,omitempty"`
}

func (m *PlayerInfo) Reset()                    { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string            { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()               {}
func (*PlayerInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PlayerInfo) GetProf() int32 {
	if m != nil {
		return m.Prof
	}
	return 0
}

func (m *PlayerInfo) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PlayerInfo) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *PlayerInfo) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func init() {
	proto.RegisterType((*GameStartResponse)(nil), "GameStartResponse")
	proto.RegisterType((*PlayerInfo)(nil), "PlayerInfo")
}

func init() { proto.RegisterFile("GameStartResponseProto.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x3f, 0x4f, 0xeb, 0x30,
	0x10, 0x97, 0x93, 0xfe, 0xbd, 0x74, 0xe8, 0xb3, 0xde, 0x10, 0x55, 0xd5, 0x7b, 0xa5, 0x2c, 0x99,
	0x32, 0x14, 0x06, 0x60, 0x60, 0x00, 0x95, 0xaa, 0x4c, 0x51, 0x60, 0x62, 0x73, 0xcb, 0x15, 0x55,
	0xd4, 0x71, 0x64, 0xbb, 0x55, 0xd3, 0x8f, 0xcc, 0xa7, 0x40, 0xb6, 0x53, 0x12, 0x28, 0x4b, 0x72,
	0xbf, 0xfb, 0xfd, 0xb1, 0x73, 0x17, 0x18, 0xce, 0x18, 0xc7, 0x27, 0xcd, 0xa4, 0x4e, 0x51, 0xe5,
	0x22, 0x53, 0x98, 0x48, 0xa1, 0x45, 0x9c, 0x9b, 0xe7, 0xf8, 0xc3, 0x87, 0x3f, 0x27, 0x02, 0x3a,
	0x84, 0xee, 0x4a, 0x32, 0x8e, 0xcf, 0x6b, 0x8e, 0x21, 0x19, 0x91, 0xa8, 0x99, 0x56, 0x0d, 0xfa,
	0x0f, 0xc0, 0x82, 0x7b, 0xb1, 0xcd, 0x74, 0xe8, 0x59, 0xba, 0xd6, 0xa1, 0x03, 0xe8, 0xbc, 0x1d,
	0xcd, 0xfe, 0x88, 0x44, 0x7e, 0xfa, 0x85, 0x4d, 0xb2, 0x32, 0x47, 0x59, 0xb2, 0x61, 0xc9, 0xaa,
	0x61, 0x9c, 0x9c, 0xed, 0x1f, 0x4c, 0x54, 0xd8, 0x74, 0xce, 0x23, 0xa6, 0x14, 0x1a, 0x0a, 0xf1,
	0x35, 0x6c, 0xd9, 0xf3, 0x6c, 0x4d, 0xc7, 0xd0, 0xcb, 0xa5, 0xc8, 0xe7, 0x99, 0x46, 0xb9, 0x63,
	0x9b, 0xb0, 0x6d, 0xb9, 0x6f, 0x3d, 0x3a, 0x85, 0xc0, 0xe0, 0x04, 0xe5, 0x12, 0x33, 0x1d, 0x76,
	0x46, 0x7e, 0x14, 0x4c, 0xce, 0xe3, 0x93, 0x8f, 0x8e, 0x93, 0x4a, 0x35, 0xcd, 0xb4, 0x2c, 0xd2,
	0xba, 0x8f, 0x5e, 0x43, 0x3b, 0xdf, 0xb0, 0x02, 0xa5, 0x0a, 0xbb, 0x36, 0xe2, 0xff, 0x6f, 0x11,
	0x4e, 0xe1, 0xec, 0x47, 0xfd, 0xe0, 0x16, 0xfa, 0x3f, 0xb3, 0x69, 0x1f, 0xfc, 0x77, 0x2c, 0xca,
	0xd9, 0x9a, 0x92, 0xfe, 0x85, 0xe6, 0x8e, 0x6d, 0xb6, 0x58, 0x0e, 0xd4, 0x81, 0x1b, 0xef, 0x8a,
	0x0c, 0x66, 0xd0, 0xab, 0x07, 0xd7, 0xbd, 0x5d, 0xe7, 0x3d, 0xab, 0x7b, 0x83, 0x49, 0x50, 0x5e,
	0x64, 0x9e, 0xad, 0x44, 0x2d, 0x68, 0xfc, 0x08, 0x50, 0x11, 0x66, 0xa0, 0xb9, 0x14, 0xab, 0xf2,
	0x0e, 0xb6, 0xa6, 0x3d, 0x20, 0x7b, 0x1b, 0xe2, 0xa5, 0x64, 0x6f, 0x50, 0x61, 0x37, 0xe8, 0xa5,
	0xa4, 0x30, 0xe8, 0x60, 0x57, 0xe6, 0xa5, 0xe4, 0x70, 0x77, 0x09, 0xd1, 0x52, 0xf0, 0x78, 0xcd,
	0xb9, 0xe0, 0x22, 0x3e, 0x08, 0xbe, 0x58, 0x63, 0xce, 0xa4, 0x2e, 0x62, 0xb3, 0x6b, 0x85, 0x72,
	0x87, 0xd2, 0xfd, 0x63, 0x2a, 0x21, 0x2f, 0x2d, 0x57, 0x2d, 0xdc, 0xfb, 0xe2, 0x33, 0x00, 0x00,
	0xff, 0xff, 0x08, 0x13, 0xcf, 0x1e, 0x95, 0x02, 0x00, 0x00,
}
